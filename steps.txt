-   Create the Next project (npx create-next-app@latest neurogen-ai --typescript --tailwind --eslint)
    Would you like to use `src/` directory? » No
    Would you like to use App Router? » Yes
    Would you like to customize the default import alias? » No

-   Init Shadcn UI into the project (npx shadcn-ui@latest init)
    Would you like to use TypeScript? » Yes
    Which style would you like to use? » Default
    Which color would you like to use as base color? » Slate
    Where is your global CSS file? » app/globals.css
    Would you like to use CSS variables for colors? » no / yes
    Where is your tailwind.config.js located? » tailwind.config.js
    Configure the import alias for components: » @/components
    Configure the import alias for utils: » @/lib/utils
    Are you using React Server Components? » no / yes
    Write configuration to components.json. Proceed? » yes

-   Stuctured the folder
    Created dashboard, landing route in app folder

-   Setup a Clerk account and create a new project as "neurogen-ai" 
    Install Clerk into our App
    Add Clerk API key to .env file
    import and use ClerkProvider from "@clerk/nextjs"
    Create middleware.ts file
    Create Auth and Routes folder into app
    Create Sign-in and Sign-up pages with the correct folder structure
    update the .env file for signin and signup routes
    Create a Layout file and Add the sign-in/up form styles in (auth) folder
    Successfully work the Clerk Auth

-   Create layout.ts in the dashboard folder and Add Sidebar into layout
-   Create Navbar page
-   Updateing Sidebar and mobile sidebar

-   Update the dashboard page [app>(dashboard)>(routes)>dashboard>page.tsx]

-   Create conversation UI
    Create a Heading component includes interface props
    Create a form components that use from Shadcn UI

-   Conversation AI API configuration
    Generate a OpenAI API and Add to .env
    Create API folder path [app>api>conversation>route.ts]
    API configuration in route.ts
    install axios
    make post axios request and get response from OpenAI
    design the Loader, User avatar, and Bot avatar components (get the user data from @clerk/nextjs)

-   Code Generation UI and API configuration
    Copy the structure from coversation as code and modified some changes
    Copy the API structure from coversation api as code api
    Create a default instruction message, and pass it to OpenAI API through axios
    Can able to get the response feom GPT model, 
    Install react-markdown and format the code as readable snippet using markdown.

-   Image Generation UI and API configuration
    Copy the structure from coversation as image and modified some changes
    change form structure in constants.ts
    modify form field elements for taking amounts and resolutions
    Copy the API structure from coversation api as image api
    modify API requests as for image Generation
    Create Image element UI
    Solve a error with next.config.js